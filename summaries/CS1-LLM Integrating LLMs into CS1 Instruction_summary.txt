Okay, here's the summary:

**Author(s):** Annapurna Vadaparty, Daniel Zingaro, David H. Smith IV, Mounika Padala, Christine Alvarado, Jamie Gorson Benario, and Leo Porter.
**Title:** CS1-LLM: Integrating LLMs into CS1 Instruction
**Journal:** Woodstock â€™18: ACM Symposium on Neural Gaze Detection
**Pages:** 7
**Year:** 2018
**DOI:** https://doi.org/XXXXXXX.XXXXXXX
**URL:** arXiv:2406.15379v1  [cs.CY]  17 Apr 2024

**Relevance to the Subject:**
This paper, an experience report titled [CS1-LLM Integrating LLMs into CS1 Instruction], is highly relevant to a systematic literature review (SLR) on the impact of Large Language Models (LLMs) on serious games because it explores a fundamental shift in CS1 curriculum due to the integration of LLMs. While it doesn't directly focus on serious games, the paper's approach to adapting core programming education in light of LLM capabilities offers valuable insights into how LLMs can be utilized in educational contexts, which is directly transferrable to serious game development and its integration into the education field. It is an experience report type paper.

**Key Points:**

The authors describe the redesign of a CS1 course at a large research-intensive university to fully integrate LLMs like GitHub Copilot from the start. The primary goal was to shift the focus away from rote syntax and code writing from scratch towards developing skills essential for using LLMs effectively.
   *The redesigned course, referred to as **CS1-LLM**, emphasizes the following skills:
    *   **Code explaining:** Students learn to understand the code generated by LLMs.
    *   **Code testing:** Students learn to verify the correctness of the code they generate with the help of LLMs.
    *   **Problem decomposition:** Students learn to break large problems into small functions that can be solved by LLMs.
   * The course utilizes a workflow based on the textbook [12] which emphasizes problem decomposition, generating code using LLM, reading, testing and modifying the output of the LLM (Figure 1)
   *   The course incorporates large, open-ended projects in three domains: data science, image processing, and game design. These projects allow students to showcase their creativity and use LLMs to build more complex solutions. The games part of this design makes the paper relevant to the systematic review on the impact of LLMs on Serious Games, as it shows an approach to gamified teaching using LLMs.
   *   The course design principles are: encourage the use of LLMs, prepare students for the industry, improve outcomes for underrepresented groups and provide opportunities for creativity.
   *   The course employed a range of pedagogical methods including Peer Instruction, pair programming, and media computation techniques.
   *  Formative assessments (35%) with reading quizzes, homework and labs, and summative assessment (65%) with projects,quizzes and a final exam are included in the teaching of the CS1-LLM course.
   *   The learning goals are classified using Bloom's taxonomy and include goals specific to using LLMs and focus on skills like prompt engineering, top-down design and testing and debugging.
   *   The course structure is described in detail with the first 4 weeks focussed on the fundamentals of programming and interaction with the LLM and the remaining 6 weeks focused on the software engineering process, in the context of data science, image manipulation and games.
   *   Student feedback from an end-of-term survey shows that most students feel comfortable using LLMs, feel that it helped their learning, and value the open-ended projects. However, some students express concerns about over-reliance on the tool and reduced confidence in coding without LLMs, which is a point for concern.
   *  Most students read the code returned by the LLM, tests and modifies the code often, but many also reported being confused by some of the responses.

   *  The authors provide lessons learned and recommendations for instructors considering integrating LLMs into their CS1 courses, including explicitly defining expectations of what students should be able to code with and without LLM assistance, and paying attention to how LLM's non determinism impacts teaching and learning.

This paper demonstrates a pragmatic approach to adapting a traditional CS1 curriculum to the reality of increasingly powerful LLMs, providing valuable insights for instructors and researchers interested in integrating LLMs in education.
